
///first.
// const spec = useMemo(() => {
//     const getSingleChartSpec = (yAxisField: string) => {
//       const yAxisType = getVegaLiteType(columns.find(column => column.field === yAxisField)?.type || 'quantitative');
//       const applyAggregation = chartType !== 'heatmap' && aggFunction !== 'None';
      
//       const baseTransform = [
//         {
//           fold: [yAxisField],
//           as: ["variable", "value"]
//         }
//       ];
  
//       const aggregationTransform = applyAggregation ? [
//         {
//           aggregate: [{
//             op: aggFunction.toLowerCase(), // 'min', 'max', 'avg'
//             field: "value",
//             as: "aggregated_value"
//           }],
//           groupby: [xAxis, "variable"]
//         }
//       ] : [];
//       const finalTransform = [...baseTransform, ...aggregationTransform];
  
//       return {
//         transform: finalTransform,
//         mark: chartType === 'line' ? { type: "line" } :
//           chartType === 'bar' ? { type: "bar" } :
//             chartType === 'area' ? { type: "area" } :
//               { type: "point", tooltip: true },
//         encoding: {
//           x: { field: xAxis, type: xAxisType },
//           y: { field: applyAggregation ? "aggregated_value" : "value", type: yAxisType, title: yAxisField },
//           color: { field: "variable", type: "nominal", title: "Variable" },
//           tooltip: [
//             { field: "variable", type: "nominal" },
//             { field: xAxis, type: xAxisType },
//             { field: applyAggregation ? "aggregated_value" : "value", type: yAxisType }
//           ]
//         }
//       };
//     };
  
//     if (mode === 'stack') {
//       // Stack mode creates separate charts for each Y-axis
//       return yAxis.map(yAxisField => ({
//         ...getSingleChartSpec(yAxisField),
//         height: 400
//       }));
//     } else {
//       // Overlay mode layers multiple Y-axis fields on the same chart
//       const layeredSpec = yAxis.map(yAxisField => ({
//         mark: chartType === 'line' ? { type: "line" } :
//           chartType === 'bar' ? { type: "bar" } :
//             chartType === 'area' ? { type: "area" } :
//               { type: "point", tooltip: true },
//         encoding: {
//           x: { field: xAxis, type: xAxisType },
//           y: {
//             field: aggFunction !== 'None' ? "aggregated_value" : "value",
//             type: getVegaLiteType(columns.find(column => column.field === yAxisField)?.type || 'quantitative'),
//             title: "Value"
//           },
//           color: { field: "variable", type: "nominal", title: "Variable" },
//           tooltip: [
//             { field: "variable", type: "nominal" },
//             { field: xAxis, type: xAxisType },
//             { field: aggFunction !== 'None' ? "aggregated_value" : "value", type: "quantitative" }
//           ]
//         },
//         transform: [
//           {
//             fold: [yAxisField],
//             as: ["variable", "value"]
//           },
//           ...(aggFunction !== 'None'
//             ? [
//                 {
//                   aggregate: [
//                     {
//                       op: aggFunction.toLowerCase(),
//                       field: "value",
//                       as: "aggregated_value"
//                     }
//                   ],
//                   groupby: [xAxis, "variable"]
//                 }
//               ]
//             : [])
//         ]
//       }));
  
//       // Combine all the layers (one per Y-axis field) in one chart
//       return {
//         width: "2000",
//         height: 1000,
//         autosize: { type: "fit", contains: "padding", resize: true },
//         data: { values: data },
//         layer: layeredSpec // All Y-axis fields as separate layers in one chart
//       };
//     }
//   }, [data, chartType, mode, yAxis, xAxis, zoomable, aggFunction, colorBy]);
  
  
  
  

 
///USedthis changed
//   const spec = useMemo(() => {
//     const getSingleChartSpec = (yAxisField: string) => {

//       const yAxisType = getVegaLiteType(columns.find(column => column.field === yAxisField)?.type || 'quantitative');
//       const baseTransform = [
//         {
//           fold: [yAxisField],
//           as: ["variable", "value"]
//         }
//       ];
//       const applyAggregation = chartType !== 'heatmap' && aggFunction !== 'None';
//       const aggregationTransform = applyAggregation ? [
//         {
//           aggregate: [{
//             op: aggFunction.toLowerCase(),
//             field: "value",
//             as: "aggregated_value"
//           }],
//           groupby: [xAxis, "variable"]
//         }
//       ] : [];
//       const finalTransform = [...baseTransform, ...aggregationTransform];
//   ////~~~~~~~~~~~~~
//       return {
//         data: { values: data },
//         transform: finalTransform,
//         mark: chartType === 'line' ? { type: "line" } :
//           chartType === 'bar' ? { type: "bar" } :
//             chartType === 'area' ? { type: "area" } :
//               { type: "point", tooltip: true },

//         encoding: chartType === 'bar' ? {
//           y: { field: xAxis, type: xAxisType },
//           x: { field:applyAggregation ? "aggregated_value" : "value", type: yAxisType, title: "Value", stack: mode === 'stack' ? 'zero' : null },
//           color: colorBy && colorBy !== "None" && chartType === 'heatmap' ? { field: colorBy, type: getVegaLiteType(columns.find(column => column.field === colorBy)?.type || 'nominal'), title: colorBy } : { field: "variable", type: "nominal", title: "Variable" },
//           tooltip: [
//             { field: "variable", type: "nominal" },
//             { field: xAxis, type: "nominal" },

//             { field: aggFunction !== 'None' ? "aggregated_value" : "value", type: "quantitative" }
//           ]
//         }:
        
//         {
//           x: { field: xAxis, type: xAxisType },
//           y: { field: applyAggregation ? "aggregated_value" : "value", type: yAxisType, title: yAxisField },
//           color: colorBy && colorBy !== "None" && chartType === 'heatmap' ? { field: colorBy, type: getVegaLiteType(columns.find(column => column.field === colorBy)?.type || 'nominal'), title: colorBy } : { field: "variable", type: "nominal", title: "Variable" },
//           tooltip: [
//             { field: "variable", type: "nominal" },
//             { field: xAxis, type: xAxisType },
//             { field: applyAggregation ? "aggregated_value" : "value", type: yAxisType }
//           ]
//         },
//         selection: zoomable === 'yes' ? {
//           grid_x: {
//             type: "interval",
//             bind: "scales",
//             zoom: "wheel",
//             encodings: ["x"],
//           },
//         } : undefined,
//         autosize: { type: "fit", contains: "padding", resize: true },

//       };
//     };
  
//     if (mode === 'stack') {
      
//       return yAxis.map(yAxisField => ({
//         ...getSingleChartSpec(yAxisField),
//         autosize: { type: "fit", contains: "padding", resize: true },
//         width: "container", // Add autosize for more responsiveness

//         height: 500 ,// Increase the height of individual stacked charts
//       }));
//     } 
//     else {
//       const layeredSpec = yAxis.map(yAxisField => ({
//         mark: chartType === 'line' ? { type: "line" } :
//           chartType === 'bar' ? { type: "bar" } :
//             chartType === 'area' ? { type: "area" } :
//               { type: "point", tooltip: true },
//         encoding: chartType === 'bar' ? {
//           y: { field: xAxis, type: xAxisType, title: xAxis },  // Move xAxis field to y
//           x: {
//             field: aggFunction !== 'None' ? "aggregated_value" : "value",
//             type: getVegaLiteType(columns.find(column => column.field === yAxisField)?.type || 'quantitative'),
//             title: "Value"  // Title for the new x-axis
          
//         },
//         color: colorBy && colorBy !== "None" && chartType === 'heatmap' ? { field: colorBy, type: getVegaLiteType(columns.find(column => column.field === colorBy)?.type || 'nominal'), title: colorBy } : { field: "variable", type: "nominal", title: "Variable" },
//       tooltip: [
//         { field: "variable", type: "nominal" },
//         { field: xAxis, type: xAxisType },
//         { field: aggFunction !== 'None' ? "aggregated_value" : "value", type: "quantitative" }
//       ],
//     } :
        
//         {
//           x: { field: xAxis, type: xAxisType },
//           y: {
//             field: aggFunction !== 'None' ? "aggregated_value" : "value",
//             type: getVegaLiteType(columns.find(column => column.field === yAxisField)?.type || 'quantitative'),
//             title: "Value"
//           },
//           color: colorBy && colorBy !== "None" && chartType === 'heatmap' ? { field: colorBy, type: getVegaLiteType(columns.find(column => column.field === colorBy)?.type || 'nominal'), title: colorBy } : { field: "variable", type: "nominal", title: "Variable" },
//           tooltip: [
//             { field: "variable", type: "nominal" },
//             { field: xAxis, type: xAxisType },
//             { field: aggFunction !== 'None' ? "aggregated_value" : "value", type: "quantitative" }
//           ],
          
//         },
        

        
        
//         transform: [
//           {
//             fold: [yAxisField],
//             as: ["variable", "value"]
//           },
//           ...(aggFunction !== 'None'
//             ? [
//                 {
//                   aggregate: [
//                     {
//                       op: aggFunction.toLowerCase(),
//                       field: "value",
//                       as: "aggregated_value"
//                     }
//                   ],
//                   groupby: [xAxis, "variable"]
//                 }
//               ]
//             : []),
            
//         ],
       
       
        
//       }));
  
//       return {
//         width: 1000,
//         height: 500,
//         autosize: { type: "fit", contains: "padding", resize: true },
//         data: { values: data },
//         layer: layeredSpec,
       

        

//       };
//     }
//   }, [data, chartType, mode, yAxis, xAxis, zoomable, aggFunction, colorBy]);